name: .NET Build and Test Workflow

on:
  push:
    branches:
    - feature**

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Check out the repository
      uses: actions/checkout@v2
      with:
        ref: ${{ github.ref }}

    - name: Set up .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '8.0.x'

    - name: Install dependencies
      run: dotnet restore src/app/ControlePedido.Pedidos/ControlePedidos.Pedidos.sln

    - name: Build the project
      run: dotnet build --no-restore --configuration Release src/app/ControlePedido.Pedidos/ControlePedidos.Pedidos.sln

    - name: Run tests and collect coverage
      run: |
        dotnet test src/app/ControlePedido.Pedidos/ControlePedidos.Pedidos.sln \
          --no-build \
          --configuration Release \
          --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --results-directory ./TestResults \
          --logger:"trx" \
          /p:CollectCoverage=true \
          /p:CoverletOutputFormat=openxml \
          /p:CoverletOutput=./TestResults/coverage.opencover.xml

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@v2
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=PosTechFiap33_controle-pedidos-api-pedidos \ -Dsonar.organization=postechfiap33 \ -Dsonar.host.url=https://sonarcloud.io \ -Dsonar.cs.opencover.reportsPaths=**/coverage.opencover.xml

    - name: Generate coverage report
      run: |
        # Gerar o relat√≥rio de cobertura com base no arquivo de cobertura coletado
        dotnet reportgenerator -reports:./TestResults/coverage.opencover.xml -targetdir:./TestResults/coverage-report -reporttypes:Html
